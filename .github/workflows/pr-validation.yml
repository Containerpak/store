name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download cpak binary
        run: |
          curl -sSL \
            -o cpak \
            https://github.com/Containerpak/cpak/releases/download/continuous/cpak
          chmod +x cpak

      - name: Find changed manifests
        id: changes
        run: |
          git fetch origin main
          files=$(git diff --name-only origin/main HEAD \
            | grep -E '^categories/.*/manifest\.json$' || true)
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Validate local manifest schema
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            echo "→ Validating local schema: $f"
            bash scripts/validate-manifest-schema.sh "$f"
          done

      - name: Fetch & smoke-test remote cpak.json
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            # strip "categories/<Cat>/"
            base=${f#categories/*/}
            # strip "/manifest.json"
            base=${base%/manifest.json}
            # convert github/com/... → github.com/...
            origin=${base//github\/com/github.com}

            # pick the single version field
            ref=$(jq -r '.branch // .commit // .release' "$f")

            url="https://raw.githubusercontent.com/${origin}/${ref}/cpak.json"
            echo "→ Fetching remote cpak.json: $url"
            curl -sSL "$url" -o remote.json

            echo "→ Validating remote JSON syntax"
            jq empty remote.json
          done

      - name: Test install of added cpak
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            base=${f#categories/*/}
            base=${base%/manifest.json}
            origin=${base//github\/com/github.com}

            BRANCH=$(jq -r '.branch // empty' "$f")
            COMMIT=$(jq -r '.commit // empty' "$f")
            RELEASE=$(jq -r '.release // empty' "$f")

            args=()
            [ -n "$BRANCH" ]  && args+=(--branch "$BRANCH")
            [ -n "$COMMIT" ]  && args+=(--commit "$COMMIT")
            [ -n "$RELEASE" ] && args+=(--release "$RELEASE")

            echo "→ Installing via cpak: cpak install $origin ${args[*]}"
            ./cpak install "$origin" "${args[@]}"
          done
