name: PR Validation
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download cpak binary
        run: |
          curl -sSL \
            -o cpak \
            https://github.com/Containerpak/cpak/releases/download/continuous/cpak
          chmod +x cpak

      - name: Find changed manifests
        id: changes
        run: |
          git fetch origin main
          files=$(git diff --name-only origin/main HEAD \
            | grep -E '^categories/.*/manifest\.json$' || true)
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Validate local manifest schema
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            echo "Validating schema of $f"
            bash scripts/validate-manifest-schema.sh "$f"
          done

      - name: Validate remote manifest schema
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            origin=$(echo "$f" \
              | sed -E 's|categories/[^/]*/||; s|/manifest\.json$||; \
                        s|github/com|github.com|')
            url="https://raw.githubusercontent.com/${origin}/main/manifest.json"
            echo "Fetching remote manifest: $url"
            curl -sSL "$url" -o remote.json
            ./scripts/validate-manifest-schema.sh remote.json
          done

      - name: Test install of added cpak
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            origin=$(echo "$f" \
              | sed -E 's|categories/[^/]*/||; s|/manifest\.json$||; \
                        s|github/com|github.com|')

            BRANCH=$(jq -r '.branch // ""' "$f")
            COMMIT=$(jq -r '.commit // ""' "$f")
            RELEASE=$(jq -r '.release // ""' "$f")
            count=$(printf "%s\n%s\n%s\n" \
              "$BRANCH" "$COMMIT" "$RELEASE" | grep -cve '^$')
            if [ "$count" -ne 1 ]; then
              echo "ERROR: exactly one of branch, commit or release must be set"
              exit 1
            fi

            args=()
            [ -n "$BRANCH" ]  && args+=(--branch "$BRANCH")
            [ -n "$COMMIT" ]  && args+=(--commit "$COMMIT")
            [ -n "$RELEASE" ] && args+=(--release "$RELEASE")

            echo "â†’ Installing $origin ${args[*]}"
            ./cpak install "$origin" "${args[@]}"
          done
