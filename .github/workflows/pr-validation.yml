name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download cpak binary
        run: |
          curl -sSL \
            -o cpak \
            https://github.com/Containerpak/cpak/releases/download/continuous/cpak
          chmod +x cpak

      - name: Find changed manifests
        id: changes
        run: |
          git fetch origin main
          files=$(git diff --name-only origin/main HEAD \
            | grep -E '^categories/.*/manifest\.json$' || true)
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Validate local manifest schema
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            echo "→ Validating local schema: $f"
            set -euo pipefail

            file="$f"

            if ! jq empty "$file" >/dev/null 2>&1; then
              echo "ERROR: invalid JSON in $file"
              exit 1
            fi

            for field in name description; do
              if ! jq -e --arg f "$field" '.[$f] | type == "string" and (. != "")' "$file" >/dev/null; then
                echo "ERROR: '$field' must be a non-empty string in $file"
                exit 1
              fi
            done

            count=$(jq -r '[.branch, .commit, .release]
              | map(select(type=="string" and . != "")) | length' "$file")
            if [ "$count" -ne 1 ]; then
              echo "ERROR: exactly one of branch, commit or release must be set in $file"
              exit 1
            fi

            echo "OK: $file"
          done

      - name: Fetch & smoke-test remote cpak.json
        if: steps.changes.outputs.files != ''
        run: |
          set -euo pipefail
          for f in ${{ steps.changes.outputs.files }}; do
          base=${f#categories/*/}
          base=${base%/manifest.json}
          origin=${base//github\/com/github.com}
          ref=$(jq -r '.branch // .commit // .release' "$f")
          url="https://raw.githubusercontent.com/${repo_path}/${ref}/cpak.json"
        
          echo "→ Fetching remote cpak.json: $url"
          curl -sfSL "$url" -o remote.json
          echo "→ Validating remote JSON syntax"
          jq empty remote.json
          echo "OK: remote cpak.json is valid"
            done
      
      - name: Validate asset file types in PR
        if: steps.changes.outputs.files != ''
        run: |
          set -euo pipefail
          for f in ${{ steps.changes.outputs.files }}; do
          base=${f#categories/*/}
          base=${base%/manifest.json}
          echo "→ Validating local assets in categories/${base}/"
          # List all files in the PR under the package folder
          files=$(find categories/${base}/ -type f)
        
          icon_found=false
          for file in $files; do
            ext="${file##*.}"
            filename="${file##*/}"
        
            # Allowed extensions
            if [[ ! "$ext" =~ ^(svg|webp|webm|json)$ ]]; then
              echo "ERROR: invalid file type '$ext' in $file"
              exit 1
            fi
        
            # screenshot-*.webp required
            if [[ "$filename" == screenshot-* && "$ext" != "webp" ]]; then
              echo "ERROR: files with prefix 'screenshot-' must be .webp: $file"
              exit 1
            fi
        
            # showcase.webm required
            if [[ "$filename" == "showcase."* && "$ext" != "webm" ]]; then
              echo "ERROR: the 'showcase' file must be .webm: $file"
              exit 1
            fi
        
            # icon.svg required
            if [[ "$filename" == "icon.svg" ]]; then
              icon_found=true
            fi
          done
        
          if [[ "$icon_found" != true ]]; then
            echo "ERROR: missing required file 'icon.svg' in categories/${base}/"
            exit 1
          fi
        
          echo "OK: valid local assets for $base"
            done
        
      - name: Test install of added cpak
        if: steps.changes.outputs.files != ''
        run: |
          for f in ${{ steps.changes.outputs.files }}; do
            base=${f#categories/*/}
            base=${base%/manifest.json}
            origin=${base//github\/com/github.com}

            BRANCH=$(jq -r '.branch // empty' "$f")
            COMMIT=$(jq -r '.commit // empty' "$f")
            RELEASE=$(jq -r '.release // empty' "$f")

            args=()
            [ -n "$BRANCH" ]  && args+=(--branch "$BRANCH")
            [ -n "$COMMIT" ]  && args+=(--commit "$COMMIT")
            [ -n "$RELEASE" ] && args+=(--release "$RELEASE")

            echo "→ Installing via cpak: cpak install $origin ${args[*]}"
            ./cpak install "$origin" "${args[@]}"
          done

      - name: Comment on success
        if: ${{ always() && success() }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ✅ PR validation succeeded!
            Tested manifests:
            ```
            ${{ steps.changes.outputs.files }}
            ```

      - name: Comment on failure
        if: ${{ always() && failure() }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ❌ PR validation failed.
            Please check the [logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            for details.
